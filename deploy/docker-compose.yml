version: "3"

services:
  client:
    image: node:latest
    container_name: demo-client
    restart: on-failure
    networks: 
    - demo-man
    volumes: 
    - ../client:/app
    environment:
      VERSION: 0.0.0-dev
    working_dir: /app
    command: [ "npm", "run", "serve" ]
    ports: 
    - "8081:8080"

  api:
    image: node:alpine
    container_name: demo-api
    restart: on-failure
    depends_on: 
    - db
    environment: 
      PORT: "8080"
      VERSION: 0.0.0-dev
      MONGOURL: mongodb://demo-mongodb:27017
      WAVE_ENDPOINT: 'http://waveman:8083'
      API_ENDPOINT: 'http://localhost:8080/api/v1/demo'
      DB: demo
      TOKEN: demotoken
    networks:
    - demo-man
    volumes: 
    - ../api:/app
    working_dir: /app
    command: [ "npm", "start" ]
    ports: 
    - "8080:8080"

  watchdog:
    # build: ../watchdog
    image: node:alpine
    container_name: demo-watchdog
    restart: on-failure
    environment: 
      VOLUME: /app/files
      PUBLIC_PATH: '{"prefix": "https", "hostname": "files.zoomoid.de", "dir": ""}'
      TOKEN: demotoken
      API_ENDPOINT: 'http://api:8080/api/v1/demo'
      VERSION: 0.0.0-dev
    volumes:
    - ./files:/app/files
    - ../watchdog:/app
    working_dir: /app
    command: [ "npm", "start" ]
    networks:
    - demo-man
    ports:
    - "8082:8080"

  waveman:
    image: wave-man
    build:
      context: ../waveman
      dockerfile: Dockerfile
    container_name: demo-wave-man
    restart: on-failure
    environment:
      VERSION: 0.0.0-dev
    networks:
    - demo-man
    volumes: 
    - ../waveman/config:/app/config
    - ./files:/app/files
    ports:
    - "8083:8080"

  db:
    image: mongo:4.2.5
    container_name: demo-mongodb
    restart: on-failure
    volumes:
    - db-data:/data/db
    environment: 
      MONGO_INITDB_DATABASE: demo
    networks:
    - demo-man
    ports:
    - "27017:27017"

networks:
  demo-man:

volumes:
  db-data: